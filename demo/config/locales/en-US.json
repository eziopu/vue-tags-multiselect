{
  "_comment": "en-US English (United States) 英文",
  "package": {
    "main": "This is a complex multi-selector.",
    "description": {
      "1": "This package consists of a two-layer structure, similar to a dropdown wrapping another dropdown.",
      "2": "Will duplicate the HTML content of options as the display basis for tags.",
      "3": "Finally, it will output an object containing keys and values."
    },
    "setup": {
      "global": "In main.js you can mount it as a global Vue component",
      "component": "In a specific component (e.g.: Component.vue)"
    }
  },
  "attributes": {
    "app": {
      "v-model": "Binding value",
      "disabled": "Whether input is disabled",
      "loading": "Whether input is loading",
      "debugLog": "Whether to display console.log in the browser's developer tools",
      "dropdownLoading": "Whether dropdown is loading",
      "search": "Option value search by app input value",
      "create": "Create tag with no title, value is by input",
      "create__notice": "then create and search is false, The input will be unable to accept text",
      "clearable": "Whether to enable the clear button",
      "merge": "When tags same title share display one",
      "keyboard": "Enable keyboard operation",
      "keyboard__detail": "When the package gains focus, the following keyboard keys can be used",
      "transition": "Enable css animation",
      "tagPosition": "The placement of the tag. By default, it's positioned to the left of the input. It can be changed to be placed above or below the input",
      "tagPosition__notice": "whether above or below, doesn't affect <code class='tag'>keyboard</code> operations",
      "conjunction": "Select mode",
      "conjunction__parameters": {
        "null": "- : after the second selected, 'OR' mode button will appear at the top",
        "OR": "OR: always show options that can be selected",
        "AND": "AND: selected tag don't show (filter by tag key)"
      },
      "deleteIcon": "Tag delete display logic and where",
      "deleteIcon__notice": "when editing mode, keyboard delete always work",
      "deleteIcon__parameters": {
        "always": "always: whether show",
        "edit": "edit: only edit this tag show",
        "none": "none: whether do not show *only able to use the keyboard's delete key"
      },
      "placeholder": "Input placeholder, please choose one of the following to use",
      "placeholder__details": {
        "placeholder": "A string type that is like the placeholder of an input box",
        "placeholders": "An object type that stores various placeholder for different contexts",
        "remark": "the weight of placeholder will be greater than placeholders"
      },
      "placeholders__detail": "Individual scenario input placeholder",
      "placeholders": {
        "initial": "Initial default text, only enabled when there is no tag.",
        "loading": "The text being loaded.",
        "loading__notice": "Only enabled when the parameter <code class='tag'>loading</code> is true.",
        "selectDown": "Text displayed after all options are completed.",
        "selectDown__notice": "Only enabled when the parameter <code class='tag'>create</code> is true.",
        "finish": "Text displayed after all options are completed.",
        "finish__notice": "Only enabled when the parameter <code class='tag'>create</code> is false.",
        "tagValueRepeat": "Displayed when updating a tag detects a duplicate value.",
        "tagValueRepeat__notice": "Only flashes twice and disappears after focusing on the tag element."
      }
    },
    "slots": {
      "v-tag-dropdown": "Content of the multiselect, usually a <code class='tag'>&lt;v-tag-dropdown&gt;</code> element",
      "v-tag-option": "Content of the v-tag-dropdown menu, usually a <code class='tag'>&lt;v-tag-option&gt;</code> element",
      "loading": "Loading template",
      "loading__notice": "only attribute <code class='tag'>loading</code> is true will work",
      "dropdown-loading": "Dropdown loading template",
      "dropdown-loading__notice": "only the loading template for the dropdown section.",
      "tag-conjunction": "Tags value connection symbol",
      "tag-conjunction__notice": "only attribute <code class='tag'>merge</code> is true will work",
      "option-undo": "Option undo template in dropdown",
      "option-undo__notice": "only selected <code class='tag'>title</code> <code class='tag'>&lt;v-tag-option&gt;</code> display",
      "option-OR-conjunction": "Option OR conjunction template in dropdown",
      "option-OR-conjunction__notice": "only attribute <code class='tag'>conjunction</code> is 'null' display"
    },
    "events": {
      "focus": "Triggered when the package gains focus",
      "blur": "Triggered when the package loses focus",
      "status": "Obtains the current operation status",
      "status__parameter_extended_description": {
        "selecting": "@:attributes.events.selecting-tag",
        "finish": "All options are completed and <code class='tag'>create</code> 為 false",
        "delect-down": "All options are completed but <code class='tag'>create</code> 為 true"
      },
      "clear": "Triggered when the user clicks the clear button",
      "inputValue": "Obtains the current value of the input",
      "visibleChange": "Triggered when the dropdown box appears/disappears",
      "removeTag": "Triggered when a tag is removed",
      "selectingTag": "Obtains the current selected tag (including selected and editing)"
    },
    "exposes": {
      "focus": "Focuses on the input box of the package",
      "blur": "Causes the input box of the package to lose focus and hides the dropdown menu",
      "clear": "Clears the input box",
      "clearTags": "Clears the selected tags",
      "initialize": "Reinitializes the package",
      "pushTag": "Force assign a tag to the package",
      "pushTag__details": {
        "sub-description": "Will create a brand new tag or combine with the current tag depending on the parameters you input and the package situation",
        "no-key": {
          "description": "When the content of the parameter (tag object) has no key | when no key is input",
          "simple-description": "When there is no key",
          "1": "If the current state is in selecting mode, it will match the current <code class='tag'>&lt;v-tag-dropdown&gt;</code> | in selecting mode",
          "2": "In other cases, it will directly generate the tag | Not in selecting mode"
        },
        "has-key": {
          "description": "When the content of the parameter (tag object) has a key | when a key is input",
          "simple-description": "When there is a key",
          "1": "If there is a matching key for the same <code class='tag'>&lt;v-tag-dropdown&gt;</code>, it will automatically match and complete that tag, regardless of whether it is in selecting mode | When there is the same key",
          "2": "If there is no matching key for <code class='tag'>&lt;v-tag-dropdown&gt;</code>, it will directly generate the tag | When there is no same key"
        },
        "demo0": {
          "description": "When adding components in <code class='tag'>&lt;v-tag-option&gt;</code>, this method must be used",
          "notice": "To input external values, please do not fill in the value of <code class='tag'>&lt;v-tag-option&gt;</code>",
          "comment": "The display-all in the <code class='tag'>&lt;v-tag-dropdown&gt;</code> in the example is just for convenience, turning it off does not affect the operation"
        },
        "demo1": {
          "title": "Arbitrary operation",
          "description": "The submission button will delay sending for",
          "description-1": "Seconds",
          "sub-description": "After clicking the button, please proceed immediately",
          "fast": "Quick apply scenario"
        },
        "parameter": {
          "key": "Tag key",
          "value": "Tag value",
          "valueElm": "Html element for the value",
          "titleElm": "Html element for the title",
          "classList": "Custom class name", 
          "custom": "After completing the tag, is it possible to freely modify the value of the tag",
          "displayValue": "After completing the tag, is it possible to change the displayed value of the tag"
        }
      }
    },
    "dropdown": {
      "value": "Tag key",
      "class": "HTML element class, will be applied to the tag",
      "display-all": "Show all options in this dropdown",
      "hidden": "Don't show this dropdown",
      "custom": "This tag value can use intput value",
      "disabled": "Whether options are disabled in this dropdown",
      "divided": "Whether a top divider is displayed"
    },
    "option": {
      "value": "Tag value",
      "value__notice": "optional",
      "value__notices": {
        "0": "Filled: Assign dropdown values upon click",
        "1": "Not filled: No click event assigned and no dropdown values assigned",
        "2": "If dropdown values need to be assigned without being filled, use <code class='tag'>pushTag</code> method"
      },
      "title": "Starting point of dropdown, other options will not be displayed",
      "title__notices": {
        "1": "Unless the parameter <code class='tag'>display-all</code> of the dropdown is set to true or there is no title option present in the dropdown, the other options will be displayed",
        "2": "There can be no title option inside the dropdown"
      },
      "class": "@:attributes.dropdown.class",
      "no_title": "The dropdown without a title option will always be displayed regardless of whether the parameter <code class='tag'>display-all</code> is set to true or not.",
      "display-value": "Tag select finished value don't show html template",
      "disabled": "Whether to disable",
      "divided": "Whether a divider is displayed",
      "selected": "Default selected tag",
      "selected__notice": "still can be deleted"
    }
  },
  "ui":{
    "languages": {
      "en-US": "English",
      "zh-Hant": "繁體中文"
    },
    "general": {
      "language": "Language",
      "required": "Required",
      "filled": "Filled",
      "not_filled": "Not filled",      
      "example": "Example",
      "defaultIs__key": "Default is {key}",
      "Attribute": "Attribute",
      "Description": "Description",
      "Type": "Type",
      "AcceptedValues": "Accepted Values",
      "Default": "Default | default",
      "FunctionName": "Function name",
      "Name": "Name",
      "Output": "Output",
      "Required": "Required",
      "Parameters": "Parameters",
      "ParameterType": "Parameter type",
      "Country": "Country",
      "Height(m)": "Height(m)",
      "Remark": "Remark",
      "NotFind": "Not find any",
      "Extended": "Extended description"
    },
    "page": {
      "basic": "No slot components, no parameter, just a tag bar",
      "addOption": "Make it like a dropdowns, need to have slots <code class='tag'>&lt;v-tag-dropdown&gt;</code> and <code class='tag'>&lt;v-tag-option&gt;</code>",
      "addOption__details": {
        "1": "<code class='tag'>&lt;v-tag-dropdown&gt;</code> : is tag key name",
        "2": "<code class='tag'>&lt;v-tag-option&gt;</code> : is tag key value, it's inside the <code class='tag'>&lt;v-tag-dropdown&gt;</code>",
        "3": "If one <code class='tag'>&lt;v-tag-option&gt;</code> is title, will hide other option to next step show"
      },
      "customStyle": "Slot <code class='tag'>v-tag-dropdown</code> element className not only use in dropdown, but also use by selected tag.",
      "customStyle__details": "If you want to slot <code class='tag'>v-tag-option</code> className use by selected tag's value, can create your own elements in it",
      "sentence": {
        "Go_to_detail_option_attributes_description": "Go to detail option attributes description",
        "The_attributes_changes_in_this_demo_will_only_affect_the_first_dropdown": "The attributes changes in this demo will only affect the first dropdown",
        "Some_attributes_will_change_the_second_dropdown": "Some attributes will change the second dropdown",
        "The_attributes_changes_in_this_demo_will_only_affect_the_first_option(title)": "The attributes changes in this demo will only affect the first option(title)",
        "The_attributes_changes_in_this_demo_will_only_affect_the_second_option": "The attributes changes in this demo will only affect the second option",
        "Some_attributes_will_change_the_second_option": "Some attributes will change the second option",
        "notice": {
          "click_the_tag_to_edit_mode": "click the tag to edit mode",
          "change_the_second": "change the second"
        }
      }
    },
    "data": {
      "country": {
        "Māre": "Māre",
        "Eldia": "Eldia"
      },
      "name": {
        "Grisha Yeager": "Grisha Yeager",
        "Eren Yeager": "Eren Yeager",
        "Armin Arlert": "Armin Arlert",
        "Zeke Yeager": "Zeke Yeager",
        "Lara Tybur": "Lara Tybur",
        "Annie Leonhart": "Annie Leonhart",
        "Reiner Braun": "Reiner Braun",
        "Pieck Finger": "Pieck Finger",
        "Porco Galliard": "Porco Galliard",
        "Levi Ackerman": "Levi Ackerman"
      },
      "remark": {
        "Free!": "Free!",
        "Good at acting": "Good at acting",
        "Sit down": "Sit down"
      }
    }
  }
}
